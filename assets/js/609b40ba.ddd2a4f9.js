"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3979],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return m}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=o,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||a;return t?r.createElement(f,l(l({ref:n},s),{},{components:t})):r.createElement(f,l({ref:n},s))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,l[1]=i;for(var u=2;u<a;u++)l[u]=t[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},2774:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return u},assets:function(){return s},toc:function(){return d},default:function(){return m}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),l=["components"],i={sidebar_position:4},c="Deployment",u={unversionedId:"Build/Deployment",id:"Build/Deployment",title:"Deployment",description:"Introduce systemd management configs.",source:"@site/docs/Build/Deployment.md",sourceDirName:"Build",slug:"/Build/Deployment",permalink:"/demobit/docs/Build/Deployment",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docs",previous:{title:"Compile and Run",permalink:"/demobit/docs/Build/Compile and Run"},next:{title:"JSON-RPC",permalink:"/demobit/docs/Build/Json-RPC"}},s={},d=[{value:"Hardware",id:"hardware",level:2},{value:"Minimum",id:"minimum",level:3},{value:"Recommended",id:"recommended",level:3},{value:"Network &amp; Port",id:"network--port",level:3},{value:"Chain Node",id:"chain-node",level:2},{value:"Start Bash",id:"start-bash",level:2},{value:"systemd config",id:"systemd-config",level:2}],p={toc:d};function m(e){var n=e.components,t=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"deployment"},"Deployment"),(0,a.kt)("p",null,"Introduce systemd management configs."),(0,a.kt)("h2",{id:"hardware"},"Hardware"),(0,a.kt)("h3",{id:"minimum"},"Minimum"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"8core\n16g\nssd iops>5k\n")),(0,a.kt)("h3",{id:"recommended"},"Recommended"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"16core\n32g\nssd iops>5k\n")),(0,a.kt)("h3",{id:"network--port"},"Network & Port"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"External IP Address\nPort TCP/UDP 31031\n")),(0,a.kt)("h2",{id:"chain-node"},"Chain Node"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"config.toml")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'[Eth]\nSyncMode = "snap"\nTrieCleanCacheRejournal= 300000000000\nTrieTimeout = 20000000000\n\n\n[Eth.Miner]\nGasFloor = 40000000\nGasCeil = 40000000\nGasPrice = 100000000\nRecommit = 3000000000\n\n\n[Eth.TxPool]\nNoLocals = true\nJournal = "transactions.rlp"\nRejournal = 600000000000\nPriceLimit = 100000000\nPriceBump = 10\nAccountSlots = 64\nGlobalSlots = 10240\nAccountQueue = 32\nGlobalQueue = 1024\nLifetime = 1800000000000\n\n[Node]\nDataDir = "/data/bitlayer-l2/chain/data"\nInsecureUnlockAllowed = true\nNoUSB = true\nIPCPath = "geth.ipc"\nHTTPHost = "0.0.0.0"\nHTTPPort = 8545\nHTTPCors = ["*"]\nHTTPVirtualHosts = ["*"]\nHTTPModules = [\'eth\', \'net\', \'web3\']\n\nWSHost = "0.0.0.0"\nWSPort = 8546\nWSModules = [\'eth\', \'net\', \'web3\']\n\nGraphQLVirtualHosts = ["localhost"]\n\n\n[Node.P2P]\nMaxPeers = 50\nNoDiscovery = false\nListenAddr = ":31031"\nEnableMsgEvents = false\n\n[Node.HTTPTimeouts]\nReadTimeout = 30000000000\nWriteTimeout = 30000000000\nIdleTimeout = 120000000000\n')),(0,a.kt)("p",null,"use snap sync in the config, if full needed - change this line"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'SyncMode = "snap"\n')),(0,a.kt)("p",null,"to"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'SyncMode = "full"\n')),(0,a.kt)("h2",{id:"start-bash"},"Start Bash"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"To show full detail help info of all flags, type ",(0,a.kt)("inlineCode",{parentName:"p"},"geth help")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"geth -h"))),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"run.sh")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#!/usr/bin/env bash\n/data/bitlayer-l2/chain/geth-linux-amd64 \\\n--config /data/bitlayer-l2/chain/config.toml  \\\n--log.file /data/bitlayer-l2/chain/logs/chain.log \\\n--log.rotate=true \\\n--authrpc.port 8445 \\\n--traceaction 2 \\\n--verbosity 3  >> /data/bitlayer-l2/chain/logs/systemd_chain_console.out 2>&1\n")),(0,a.kt)("p",null,"if you need to use it as archive node, add: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--syncmode full \\\n--gcmode archive \\\n")),(0,a.kt)("p",null,"so: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#!/usr/bin/env bash\n/data/bitlayer-l2/chain/geth-linux-amd64 \\\n--config /data/bitlayer-l2/chain/config.toml  \\\n--log.file /data/bitlayer-l2/chain/logs/chain.log \\\n--log.rotate=true \\\n--authrpc.port 8445 \\\n--traceaction 2 \\\n--syncmode full \\\n--gcmode archive \\\n--verbosity 3  >> /data/bitlayer-l2/chain/logs/systemd_chain_console.out 2>&1\n")),(0,a.kt)("p",null,"If no network flags were provided, the node will connect the bitlayer mainnet by default. If you want to connect to bitlayer testnet, add:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"--testnet\n")),(0,a.kt)("h2",{id:"systemd-config"},"systemd config"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"[Unit]\nDescription=bitlayer-l2 chain service\n\n[Service]\nType=simple\nExecStart=/bin/sh /data/bitlayer-l2/chain/run.sh\nWorkingDirectory=/data/bitlayer-l2/chain\nTimeoutSec=600\nRestart=on-failure\nRestartSec=5s\n\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n")))}m.isMDXComponent=!0}}]);